---------------------------------------------------------------------------
--
-- intset.sql-
--    This file shows how to create a new user-defined type and how to
--    use this new type.
--
--
-- Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group
-- Portions Copyright (c) 1994, Regents of the University of California
--
-- src/tutorial/intset.source
--
---------------------------------------------------------------------------

-----------------------------
-- Creating a new type:
--	We are going to create a new type called 'intset' which represents
--	intset numbers.
--	A user-defined type must have an input and an output function, and
--	optionally can have binary input and output functions.  All of these
--	are usually user-defined C functions.
-----------------------------

-- Assume the user defined functions are in _OBJWD_/intset$DLSUFFIX
-- (we do not want to assume this is in the dynamic loader search path).
-- Look at $PWD/intset.c for the source.  Note that we declare all of
-- them as STRICT, so we do not need to cope with NULL inputs in the
-- C code.  We also mark them IMMUTABLE, since they always return the
-- same outputs given the same inputs.

-- the input function 'intset_in' takes a null-terminated string (the
-- textual representation of the type) and turns it into the internal
-- (in memory) representation. You will get a message telling you 'intset'
-- does not exist yet but that's okay.

CREATE FUNCTION intset_in(cstring)
   RETURNS intset
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

-- the output function 'intset_out' takes the internal representation and
-- converts it into the textual representation.

CREATE FUNCTION intset_out(intset)
   RETURNS cstring
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

-- now, we can create the type. The internallength specifies the size of the
-- memory block required to hold the type (we need two 8-byte doubles).

-- TO_DO: update the size **

CREATE TYPE intset (
   internallength = 32,
   input = intset_in,
   output = intset_out,
   alignment = double
);


-----------------------------
-- Using the new type:
--	user-defined types can be used like ordinary built-in types.
-----------------------------

-- eg. we can use it in a table
-----------------------------
-- Creating an operator for the new type:
--	Let's define an add operator for intset types. Since POSTGRES
--	supports function overloading, we'll use + as the add operator.
--	(Operator names can be reused with different numbers and types of
--	arguments.)
---------------------------

CREATE FUNCTION intset_equal(intset, intset)
   RETURNS bool
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR = (
   leftarg = intset,
   rightarg = intset,
   procedure = intset_equal
);

CREATE FUNCTION intset_cardinality(intset)
   RETURNS int
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR @ (
   rightarg = intset,
   procedure = intset_cardinality
);

CREATE FUNCTION intset_contain(int, intset)
   RETURNS bool
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR <@ (
   leftarg = int,
   rightarg = intset,
   procedure = intset_contain
);

CREATE FUNCTION intset_subset(intset, intset)
   RETURNS bool
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR @> (
   leftarg = intset,
   rightarg = intset,
   procedure = intset_subset,
   commutator = @>
);

CREATE FUNCTION intset_union(intset, intset)
   RETURNS intset
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR || (
   leftarg = intset,
   rightarg = intset,
   procedure = intset_union,
   commutator = ||
);

CREATE FUNCTION intset_intersect(intset, intset)
   RETURNS intset
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR && (
   leftarg = intset,
   rightarg = intset,
   procedure = intset_intersect,
   commutator = &&
);

CREATE FUNCTION intset_disjunction(intset, intset)
   RETURNS intset
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR !! (
   leftarg = intset,
   rightarg = intset,
   procedure = intset_disjunction,
   commutator = !!
);


CREATE FUNCTION intset_difference(intset, intset)
   RETURNS intset
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR - (
   leftarg = intset,
   rightarg = intset,
   procedure = intset_difference,
   commutator = -
);
